//
// creator : sciloop
//
// We want to create a node.
// Select no, one or more container(s),
// if you want the node(s) be a part of them.
//
// optionally last parameter : "skipSelect",
// if you do not want the created node(s) be
// automatically selected.
//
// last modified : 2014_08_23
//
// examples :
// sciCreateNode( {"mesh"} );
// sciCreateNode( {"mesh", "skipSelect"} );
// sciCreateNode( {"mesh", "nurbsCurve", "skipSelect"} );
//
//____________________________________________________________________________________
//
//
global proc sciCreateNode( string $input[] )
{
	string $sn = " // sciloop message : mel : 'sciCreateNode' :";

	int $sizeInput = size( $input );

	if( $sizeInput==0 )
	{
		print( $sn+" Parameter list is empty. Terminate script!\n" );
		return;
	}

	// Find the max iteration value.
	//
	int $max = 1;
	if( $sizeInput==1 )
	{$max = $sizeInput;}
	else if( $sizeInput!=1 )
	{
		if( $input[$sizeInput-1]=="skipSelect" )
		{$max = $sizeInput-1;}
		else
		{$max = $sizeInput;}
	}

	// Get the optionally selected containers.
	//
	string $containers[] = sciGetSelectedNodeTypes( {"container"} );

	// We want at least one iteration cycle.
	//
	if( size($containers)==0 )
	{$containers[0] = "";}

	string $allCreatedNodes[] = {};

	// Iterate through all selected containers.
	//
	for( $container in $containers )
	{
		// Iterate through the node types to create.
		//
		for( $i=0; $i<$max; $i++ )
		{
			string $nodeType = $input[$i];
			string $createdNode = "";

			// Node is already loaded -> creation succeeds.
			//
			int $sciSuccess = -1;

			$sciSuccess = !catchQuiet( $createdNode =
								createNode(	"-skipSelect",
											$nodeType,
											"-n", $nodeType+"#" ) );

			if( nodeType($createdNode)=="unknown" )
			{
				print( $sn+" created node for nodeType '"+$nodeType+
						" is 'unknown', skip!\n" );
				delete( $createdNode );
			}

			// plugin has to be loaded before creating the node.
			//
			if( $sciSuccess==false )
			{
				string $pluginName[] = sciLoadPlugin( $nodeType );

				if( $pluginName[0]=="" )
				{
					print( $sn+" the node: '"+$nodeType+"' could not be created,"+
							" because the plugin does not exist.\n" );
					continue;
				}

				// If the last parameter is "skipSelect", we do not want
				// the created node be selected.
				//
				$sciSuccess = !catchQuiet( $createdNode =
									createNode(	"-skipSelect",
												$nodeType,
												"-n", $nodeType+"#" ) );



				if( $sciSuccess==false || nodeType($createdNode)=="unknown" )
				{
					delete( $createdNode );
					print( $sn+" nodeType : "+$nodeType+" could not be created."+
							" Stop for this node type!\n" );
					continue;
				}

			}

			// Check whether we have a shape node.
			//
			string $parent = "";
			string $parentNodes[] = nodeType( "-inherited", $createdNode );

			for( $node in $parentNodes )
			{
				if( $node=="geometryShape" )
				{
					string $rel[] = listRelatives( "-f","-p", $createdNode );
					if( size($rel)!=0 )
					{$parent = $rel[0];}
					break;
				}
			}

			// In case a container node was selected when the script is run,
			// we want the created node(s) be part of that container.
			//
			if( $container=="" )
			{
				if( $parent=="" )
				{print( $sn+" created node : '"+$createdNode+"'\n" );}
				else
				{print( $sn+" created nodes : '"+$createdNode+"', '"+$parent+"'\n" );}

				continue;
			}

			string $createdNodes[] = {$createdNode};
			$allCreatedNodes[size($allCreatedNodes)] = $createdNode;

			if( $parent!="" )
			{
				$createdNodes[1] = $parent;
				$allCreatedNodes[size($allCreatedNodes)] = $parent;
			}

			container( "-e", "-f", "-an", $createdNodes, $container );

			if( $parent=="" )
			{print( $sn+" created node : '"+$createdNode+"' in : '"+$container+"'\n" );}
			else
			{
				print( $sn+" created nodes : '"+$createdNode+"', '"+
				$parent+"' in container: '"+$container+"'\n" );
			}
		}
	}

	if( $input[$max-1]!="skipSelect" )
	{select( "-r", $allCreatedNodes );}
	else
	{ select( "-d" );}
}

//___________________________________________________________________________________
//
//
